/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ms.graha.b2.freeswim1;

import ms.graha.b2.freeswim1.simulation.Emitter;
import ms.graha.b2.freeswim1.simulation.Particle;
import ms.graha.b2.freeswim1.simulation.SimulationContext;
import oscP5.OscEventListener;
import oscP5.OscMessage;
import oscP5.OscP5;
import oscP5.OscStatus;
import processing.core.*;
import processing.opengl.PShader;
import codeanticode.syphon.SyphonServer;

public class App extends PApplet implements OscEventListener {

	PGraphics syphonCanvas;
	PShader shade;
	SimulationContext simulationContext;
	int numberOfParticles = 4000;

	Emitter[] emitters = new Emitter[4];
	int mousePositionIndex = 0;
	OscP5 oscP5;
	PImage textureImage;
	static boolean enableSyphon = false;
	static int oscport = 12000;

	static int commandLineWidth = 800;
	static int commandLineHeight = 600;


	
	SyphonServer server;

	public static void main(String[] args) {
		String[] appletArgs = new String[] { "ms.graha.b2.freeswim1.App" };

		if (args != null) {
			for (int i = 0; i < args.length; i++) {
				if (args[i].equals("--width") && i < args.length - 1) {
					commandLineWidth = Integer.parseInt(args[i + 1]);
				} else if (args[i].equals("--height") && i < args.length - 1) {
					commandLineHeight = Integer.parseInt(args[i + 1]);
				} else if (args[i].equals("--syphon")) {
					enableSyphon = true;
				} else if (args[i].equals("--oscport") && i < args.length - 1) {
					oscport = Integer.parseInt(args[i + 1]);
				}
			}
		}

		System.out.println("width: " + commandLineWidth);

		PApplet.main(appletArgs);
	}

	public void settings() {

			size(commandLineWidth, commandLineHeight, P2D);
		
	}

	public void setup() {

		if (enableSyphon) {
			syphonCanvas = createGraphics(commandLineWidth, commandLineHeight, P2D);
			server = new SyphonServer(this, "FreeSwim1");
		}

		oscP5 = new OscP5(this, oscport);

		shade = loadShader("blur.glsl");
		shade.set("sketchSize", (float) width, (float) height);
		simulationContext = new SimulationContext(width, height, numberOfParticles);

		// start one default emitter
		emitters[0] = new Emitter();
		emitters[0].x = 1000;
		emitters[0].y = 500;
		emitters[0].hue = 70;
		emitters[0].enabled = true;
		background(0);
	}

	public void draw() {

		PGraphics canvas = g;

		if (enableSyphon) {
			syphonCanvas.beginDraw();
			canvas = syphonCanvas;
		} 
			

		canvas.background(0);
		canvas.strokeWeight(1);
		

		for (int j = 0; j < emitters.length; j++) {

			if ((emitters[j] == null) || (emitters[j].enabled == false)) {
				continue;
			}

			for (int i = 30; i < 100; i++) {
				float x = lerp(emitters[j].getMostRecentX(), emitters[j].x, i / 100.0f);
				float y = lerp(emitters[j].getMostRecentY(), emitters[j].y, i / 100.0f);
				simulationContext.emitParticles((int) x, (int) y, (emitters[j].x - emitters[j].getOldestX()) / 40,
						(emitters[j].y - emitters[j].getOldestY()) / 5, emitters[j].hue, 1);
			}

			emitters[j].tick();
		}

		simulationContext.tick();

		Particle[] particles = simulationContext.getParticles();
		for (int i = 0; i < numberOfParticles; i++) {
			if (simulationContext.getParticles()[i] != null) {

					//canvas.stroke(512 * particles[i].intensity, 0, particles[i].hue);

			        // create a

					
					float ratio = particles[i].intensity ;
					int red, green, blue;
			
					if (ratio < 0.5f) { // from black (0) to hot pink (128)
						// Black is (0,0,0) and hot pink is (255,105,180), so we need to scale accordingly
						red = (int) (255 * (ratio / 0.5f));
						green = (int) (105 * (ratio / 0.5f));
						blue = (int) (180 * (ratio / 0.5f));
					} else { // from hot pink (128) to white (255)
						// Hot pink is (255,105,180) and white is (255,255,255), so we scale the remaining colors
						red = 255;
						green = 105 + (int) ((255 - 105) * ((ratio - 0.5f) / 0.5f));
						blue = 180 + (int) ((255 - 180) * ((ratio - 0.5f) / 0.5f));
					}
			

					canvas.stroke(red, green, blue);


					canvas.line(particles[i].x, particles[i].y, particles[i].x - particles[i].vx,
							particles[i].y - particles[i].vy);
		

			}
		}


		
		if (enableSyphon) {
			syphonCanvas.endDraw();
			//syphonCanvas.filter(shade);
			//syphonCanvas.updatePixels();
			server.sendImage(syphonCanvas);
		}  else{
		//	filter(shade);
		}
	}


	@Override
	public void oscStatus(OscStatus arg0) {
	}

	@Override
	public void oscEvent(OscMessage message) {
		for (int i = 0; i < emitters.length; i++) {
			String emitterPattern = "/emitters/" + i;

			if (message.checkAddrPattern(emitterPattern + "/enable")) {

				int value = message.get(0).intValue();
				System.out.println(value);
				if (value == 1) {
					if (emitters[i] == null) {
						emitters[i] = new Emitter();
					}
					emitters[i].enabled = true;
				} else {
					emitters[i].enabled = false;
				}
			}

			if (message.checkAddrPattern(emitterPattern + "/hue")) {

				float value = message.get(0).floatValue();
				if (emitters[i] != null) {
					emitters[i].hue = value;
				}
			}

			if (message.checkAddrPattern(emitterPattern + "/x")) {

				float value = message.get(0).floatValue();
				if (emitters[i] != null) {
					emitters[i].x = value * width;
				}
			}

			if (message.checkAddrPattern(emitterPattern + "/y")) {

				float value = message.get(0).floatValue();
				if (emitters[i] != null) {
					emitters[i].y = value * height;
				}
			}
		}

	}
}
